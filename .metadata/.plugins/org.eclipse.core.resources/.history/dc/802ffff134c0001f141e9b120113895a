package co.kh.dev.home.model;

import java.sql.Connection;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;

import co.kh.dev.common.ConnectionPool;

public class ShopDAO {
    private static ShopDAO sDAO;
    private ConnectionPool cp = ConnectionPool.getInstance();

    // SQL 쿼리문 정의
    private final String SELECT_SQL = "SELECT * FROM SHOP_RNUM WHERE RNUM BETWEEN ? AND ? ORDER BY RNUM DESC";
    private final String SELECT_RECORD_SQL = "SELECT COUNT(*) COUNT FROM SHOP_RNUM";
    private final String SELECT_BY_TITLE_SQL = "SELECT * FROM (SELECT ROWNUM AS RNUM, NO, TYPE, PRODUCT_NO, TITLE, CONTENT, SUBDATE FROM SHOP WHERE TITLE LIKE '%'||?||'%' ORDER BY SUBDATE) WHERE RNUM BETWEEN ? AND ? ORDER BY RNUM DESC";
    private final String SELECT_BY_TITLE_RECORD_SQL = "SELECT COUNT(*) COUNT FROM SHOP_RNUM WHERE TITLE LIKE '%'||?||'%'";
    private final String SELECT_BY_NO_SQL = "SELECT * FROM SHOP_RNUM WHERE NO = ?";
    private final String INSERT_SQL = "INSERT INTO SHOP VALUES((SELECT NVL(MAX(NO), 0) + 1 FROM SHOP), ?, ?, ?, ?, SYSDATE)";
    private final String DELETE_SQL = "DELETE FROM SHOP WHERE NO = ?";

    private ShopDAO() {}

    public static ShopDAO getInstance() {
        if (sDAO == null) {
            synchronized (ShopDAO.class) {
                if (sDAO == null) {
                    sDAO = new ShopDAO();
                }
            }
        }
        return sDAO;
    }

    public boolean insertDB(ShopVO svo) {
        Connection con = cp.getConnection();
        PreparedStatement pstmt = null;
        int rs = 0;
        try {
            pstmt = con.prepareStatement(INSERT_SQL);
            pstmt.setInt(1, svo.getProductNo());
            pstmt.setInt(2, svo.getType());
            pstmt.setString(3, svo.getTitle());
            pstmt.setString(4, svo.getContent());
            rs = pstmt.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            cp.dbClose(con, pstmt);
        }
        return rs != 0;
    }

    public ArrayList<ShopVO> selectDB(int startListNum, int endListNum) {
        Connection con = cp.getConnection();
        PreparedStatement pstmt = null;
        ResultSet rs = null;
        ArrayList<ShopVO> sList = new ArrayList<>();
        try {
            pstmt = con.prepareStatement(SELECT_SQL);
            pstmt.setInt(1, startListNum);
            pstmt.setInt(2, endListNum);
            rs = pstmt.executeQuery();
            while (rs.next()) {
                int rownum = rs.getInt("RNUM");
                int no = rs.getInt("NO");
                int type = rs.getInt("TYPE");
                int productNo = rs.getInt("PRODUCT_NO");
                String name = rs.getString("NAME");
                int price = rs.getInt("PRICE");
                int amount = rs.getInt("AMOUNT");
                String title = rs.getString("TITLE");
                String content = rs.getString("CONTENT");
                Date subdate = rs.getDate("SUBDATE");
                ShopVO svo = new ShopVO(rownum, no, type, productNo, name, price, amount, title, content, subdate);
                sList.add(svo);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        cp.dbClose(con, rs, pstmt);
        return sList;
    }

    public ArrayList<ShopVO> selectByTitleDB(String findText, int startListNum, int endListNum) {
        Connection con = cp.getConnection();
        PreparedStatement pstmt = null;
        ResultSet rs = null;
        ArrayList<ShopVO> sList = new ArrayList<>();
        try {
            pstmt = con.prepareStatement(SELECT_BY_TITLE_SQL);
            pstmt.setString(1, findText);
            pstmt.setInt(2, startListNum);
            pstmt.setInt(3, endListNum);
            rs = pstmt.executeQuery();
            while (rs.next()) {
                int rownum = rs.getInt("RNUM");
                int no = rs.getInt("NO");
                int type = rs.getInt("TYPE");
                int productNo = rs.getInt("PRODUCT_NO");
                String name = rs.getString("NAME");
                int price = rs.getInt("PRICE");
                int amount = rs.getInt("AMOUNT");
                String title = rs.getString("TITLE");
                String content = rs.getString("CONTENT");
                Date subdate = rs.getDate("SUBDATE");
                ShopVO svo = new ShopVO(rownum, no, type, productNo, name, price, amount, title, content, subdate);
                sList.add(svo);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        cp.dbClose(con, rs, pstmt);
        return sList;
    }

    public ShopVO selectByNoDB(int shopNo) {
        Connection con = cp.getConnection();
        PreparedStatement pstmt = null;
        ResultSet rs = null;
        ShopVO svo = null;
        try {
            pstmt = con.prepareStatement(SELECT_BY_NO_SQL);
            pstmt.setInt(1, shopNo);
            rs = pstmt.executeQuery();
            if (rs.next()) {
                int rownum = rs.getInt("RNUM");
                int no = rs.getInt("NO");
                int type = rs.getInt("TYPE");
                int productNo = rs.getInt("PRODUCT_NO");
                String name = rs.getString("NAME");
                int price = rs.getInt("PRICE");
                int amount = rs.getInt("AMOUNT");
                String title = rs.getString("TITLE");
                String content = rs.getString("CONTENT");
                Date subdate = rs.getDate("SUBDATE");
                ShopVO svo = new ShopVO(rownum, no, type, productNo, name, price, amount, title, content, subdate);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            cp.dbClose(con, rs, pstmt);
        }
        return svo;
    }

    public int selectRecordDB() {
        Connection con = cp.getConnection();
        PreparedStatement pstmt = null;
        ResultSet rs = null;
        int count = 0;
        try {
            pstmt = con.prepareStatement(SELECT_RECORD_SQL);
            rs = pstmt.executeQuery();
            if (rs.next()) {
                count = rs.getInt("COUNT");
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        cp.dbClose(con, rs, pstmt);
        return count;
    }

    public int selectRecordByTitleDB(String findText) {
        Connection con = cp.getConnection();
        PreparedStatement pstmt = null;
        ResultSet rs = null;
        int count = 0;
        try {
            pstmt = con.prepareStatement(SELECT_BY_TITLE_RECORD_SQL);
            pstmt.setString(1, findText);
            rs = pstmt.executeQuery();
            if (rs.next()) {
                count = rs.getInt("COUNT");
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        cp.dbClose(con, rs, pstmt);
        return count;
    }

    public boolean deleteDB(int shopNo) {
        Connection con = cp.getConnection();
        PreparedStatement pstmt = null;
        int rs = 0;
        try {
            pstmt = con.prepareStatement(DELETE_SQL);
            pstmt.setInt(1, shopNo);
            rs = pstmt.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            cp.dbClose(con, pstmt);
        }
        return rs != 0;
    }
}
