package co.kh.dev.home.model;

//ProductDAO.java
package co.kh.dev.home.model;

import java.sql.Connection;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;

import co.kh.dev.common.ConnectionPool;

public class ProductDAO {
 private static ProductDAO pDAO;
 private ConnectionPool cp = ConnectionPool.getInstance();

 private final String INSERT_SQL = "INSERT INTO PRODUCT VALUES ((SELECT NVL(MAX(NO),0)+1 FROM PRODUCT),?,?,?,SYSDATE)";
 private final String SELECT_SQL = "SELECT * FROM PRODUCT ORDER BY NO";
 private final String SELECT_BY_NO_SQL = "SELECT * FROM PRODUCT WHERE NO=?";
 private final String UPDATE_SQL = "UPDATE PRODUCT SET NAME=?, PRICE=?, AMOUNT=? WHERE NO=?";
 private final String DELETE_SQL = "DELETE FROM PRODUCT WHERE NO=?";

 private ProductDAO() {}

 public static ProductDAO getInstance() {
     if (pDAO == null) {
         synchronized (ProductDAO.class) {
             if (pDAO == null) {
                 pDAO = new ProductDAO();
             }
         }
     }
     return pDAO;
 }

 public boolean insertDB(ProductVO pvo) {
     Connection con = cp.getConnection();
     PreparedStatement pstmt = null;
     int rs = 0;
     try {
         pstmt = con.prepareStatement(INSERT_SQL);
         pstmt.setString(1, pvo.getName());
         pstmt.setInt(2, pvo.getPrice());
         pstmt.setInt(3, pvo.getAmount());
         rs = pstmt.executeUpdate();
     } catch (SQLException e) {
         e.printStackTrace();
     } finally {
         cp.dbClose(con, pstmt);
     }
     return rs != 0;
 }

 public ArrayList<ProductVO> selectDB() {
     Connection con = cp.getConnection();
     PreparedStatement pstmt = null;
     ResultSet rs = null;
     ArrayList<ProductVO> pList = new ArrayList<>();
     try {
         pstmt = con.prepareStatement(SELECT_SQL);
         rs = pstmt.executeQuery();
         while (rs.next()) {
             ProductVO pvo = new ProductVO(
                 rs.getInt("NO"),
                 rs.getString("NAME"),
                 rs.getInt("PRICE"),
                 rs.getInt("AMOUNT"),
                 rs.getDate("SUBDATE")
             );
             pList.add(pvo);
         }
     } catch (SQLException e) {
         e.printStackTrace();
     } finally {
         cp.dbClose(con, rs, pstmt);
     }
     return pList;
 }

 public ProductVO selectByNoDB(ProductVO pvo) {
     Connection con = cp.getConnection();
     PreparedStatement pstmt = null;
     ResultSet rs = null;
     try {
         pstmt = con.prepareStatement(SELECT_BY_NO_SQL);
         pstmt.setInt(1, pvo.getNo());
         rs = pstmt.executeQuery();
         if (rs.next()) {
             pvo = new ProductVO(
                 rs.getInt("NO"),
                 rs.getString("NAME"),
                 rs.getInt("PRICE"),
                 rs.getInt("AMOUNT"),
                 rs.getDate("SUBDATE")
             );
         }
     } catch (SQLException e) {
         e.printStackTrace();
     } finally {
         cp.dbClose(con, rs, pstmt);
     }
     return pvo;
 }

 public boolean updateDB(ProductVO pvo) {
     Connection con = cp.getConnection();
     PreparedStatement pstmt = null;
     int rs = 0;
     try {
         pstmt = con.prepareStatement(UPDATE_SQL);
         pstmt.setString(1, pvo.getName());
         pstmt.setInt(2, pvo.getPrice());
         pstmt.setInt(3, pvo.getAmount());
         pstmt.setInt(4, pvo.getNo());
         rs = pstmt.executeUpdate();
     } catch (SQLException e) {
         e.printStackTrace();
     } finally {
         cp.dbClose(con, pstmt);
     }
     return rs != 0;
 }

 public boolean deleteDB(ProductVO pvo) {
     Connection con = cp.getConnection();
     PreparedStatement pstmt = null;
     int rs = 0;
     try {
         pstmt = con.prepareStatement(DELETE_SQL);
         pstmt.setInt(1, pvo.getNo());
         rs = pstmt.executeUpdate();
     } catch (SQLException e) {
         e.printStackTrace();
     } finally {
         cp.dbClose(con, pstmt);
     }
     return rs != 0;
 }
}

